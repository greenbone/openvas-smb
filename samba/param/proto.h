#ifndef __PARAM_PROTO_H__
#define __PARAM_PROTO_H__

#undef _PRINTF_ATTRIBUTE
#define _PRINTF_ATTRIBUTE(a1, a2) PRINTF_ATTRIBUTE(a1, a2)
/* This file was automatically generated by mkproto.pl. DO NOT EDIT */

#ifndef _PUBLIC_
#define _PUBLIC_
#endif


/* The following definitions come from param/loadparm.c  */

struct parm_struct *lp_parm_table(void);
void lp_talloc_free(void);
int lp_server_role(void);
const char **lp_smb_ports(void);
int lp_nbt_port(void);
int lp_dgram_port(void);
int lp_cldap_port(void);
int lp_krb5_port(void);
int lp_kpasswd_port(void);
int lp_web_port(void);
const char *lp_dos_charset(void);
const char *lp_swat_directory(void);
BOOL lp_tls_enabled(void);
const char *lp_tls_keyfile(void);
const char *lp_tls_certfile(void);
const char *lp_tls_cafile(void);
const char *lp_tls_crlfile(void);
const char *lp_tls_dhpfile(void);
const char *lp_unix_charset(void);
const char *lp_display_charset(void);
const char *lp_configfile(void);
const char *lp_share_backend(void);
const char *lp_sam_url(void);
const char *lp_spoolss_url(void);
const char *lp_wins_config_url(void);
const char *lp_wins_url(void);
const char *lp_winbind_separator(void);
const char *lp_winbindd_socket_directory(void);
BOOL lp_winbind_sealed_pipes(void);
const char *lp_private_dir(void);
const char *lp_serverstring(void);
const char *lp_lockdir(void);
const char *lp_modulesdir(void);
const char *lp_setupdir(void);
const char *lp_ncalrpc_dir(void);
const char *lp_piddir(void);
const char **lp_dcerpc_endpoint_servers(void);
const char **lp_server_services(void);
const char *lp_ntptr_providor(void);
const char *lp_auto_services(void);
const char *lp_passwd_chat(void);
const char **lp_passwordserver(void);
const char **lp_name_resolve_order(void);
const char *lp_realm(void);
const char *lp_socket_options(void);
const char *lp_workgroup(void);
const char *lp_netbios_name(void);
const char *lp_netbios_scope(void);
const char **lp_wins_server_list(void);
const char **lp_interfaces(void);
const char *lp_socket_address(void);
const char **lp_netbios_aliases(void);
BOOL lp_disable_netbios(void);
BOOL lp_wins_support(void);
BOOL lp_wins_dns_proxy(void);
const char *lp_wins_hook(void);
BOOL lp_local_master(void);
BOOL lp_readraw(void);
BOOL lp_large_readwrite(void);
BOOL lp_writeraw(void);
BOOL lp_null_passwords(void);
BOOL lp_obey_pam_restrictions(void);
BOOL lp_encrypted_passwords(void);
BOOL lp_bind_interfaces_only(void);
BOOL lp_unicode(void);
BOOL lp_nt_status_support(void);
BOOL lp_lanman_auth(void);
BOOL lp_ntlm_auth(void);
BOOL lp_client_plaintext_auth(void);
BOOL lp_client_lanman_auth(void);
BOOL lp_client_ntlmv2_auth(void);
BOOL lp_client_use_spnego_principal(void);
BOOL lp_host_msdfs(void);
BOOL lp_unix_extensions(void);
BOOL lp_use_spnego(void);
BOOL lp_rpc_big_endian(void);
int lp_max_wins_ttl(void);
int lp_min_wins_ttl(void);
int lp_maxmux(void);
int lp_max_xmit(void);
int lp_passwordlevel(void);
int lp_srv_maxprotocol(void);
int lp_srv_minprotocol(void);
int lp_cli_maxprotocol(void);
int lp_cli_minprotocol(void);
int lp_security(void);
const char **lp_auth_methods(void);
BOOL lp_paranoid_server_security(void);
const char **lp_js_include(void);
const char *lp_jsonrpc_services_dir(void);
const char *lp_servicename(int );
const char *lp_const_servicename(int );
const char *lp_pathname(int );
const char **lp_hostsallow(int );
const char **lp_hostsdeny(int );
const char *lp_comment(int );
const char *lp_fstype(int );
const char **lp_ntvfs_handler(int );
BOOL lp_msdfs_root(int );
BOOL lp_browseable(int );
BOOL lp_readonly(int );
BOOL lp_print_ok(int );
BOOL lp_map_hidden(int );
BOOL lp_map_archive(int );
BOOL lp_strict_locking(int );
BOOL lp_strict_sync(int );
BOOL lp_ci_filesystem(int );
BOOL lp_map_system(int );
int lp_max_connections(int );
int lp_csc_policy(int );
int lp_server_signing(void);
int lp_client_signing(void);
const char *lp_get_parametric(int lookup_service, const char *type, const char *option);
const char *lp_parm_string(int lookup_service, const char *type, const char *option);
const char **lp_parm_string_list(int lookup_service, const char *type, const char *option,
				 const char *separator);
int lp_parm_int(int lookup_service, const char *type, const char *option, int default_v);
int lp_parm_bytes(int lookup_service, const char *type, const char *option, int default_v);
unsigned long lp_parm_ulong(int lookup_service, const char *type, const char *option, unsigned long default_v);
BOOL lp_parm_bool(int lookup_service, const char *type, const char *option, BOOL default_v);
BOOL lp_add_home(const char *pszHomename, int iDefaultService, 
		 const char *user, const char *pszHomedir);
int lp_add_service(const char *pszService, int iDefaultService);
BOOL lp_add_printer(const char *pszPrintername, int iDefaultService);
struct parm_struct *lp_parm_struct(const char *name);
void *lp_parm_ptr(int snum, struct parm_struct *parm);
BOOL lp_file_list_changed(void);
void *lp_local_ptr(int snum, void *ptr);
BOOL lp_do_parameter(int snum, const char *pszParmName, const char *pszParmValue);
BOOL lp_set_cmdline(const char *pszParmName, const char *pszParmValue);
BOOL lp_set_option(const char *option);
BOOL lp_dump_a_parameter(int snum, char *parm_name, FILE * f, BOOL isGlobal);
struct parm_struct *lp_next_parameter(int snum, int *i, int allparameters);
BOOL lp_snum_ok(int iService);
void update_server_announce_as_printserver(void);
BOOL lp_loaded(void);
void lp_killunused(struct smbsrv_connection *smb, BOOL (*snumused) (struct smbsrv_connection *, int));
void lp_killservice(int iServiceIn);
BOOL lp_load(void);
void lp_resetnumservices(void);
int lp_numservices(void);
void lp_dump(FILE *f, BOOL show_defaults, int maxtoprint);
void lp_dump_one(FILE * f, BOOL show_defaults, int snum);
int lp_servicenumber(const char *pszServiceName);
int lp_find_valid_service(const char *pszServiceName);
const char *volume_label(int snum);
BOOL lp_domain_master(void);
BOOL lp_domain_logons(void);
BOOL lp_preferred_master(void);
void lp_remove_service(int snum);
void lp_copy_service(int snum, const char *new_name);
int lp_default_server_announce(void);
const char *lp_printername(int snum);
int lp_maxprintjobs(int snum);

/* The following definitions come from param/params.c  */

BOOL pm_process( const char *FileName,
                 BOOL (*sfunc)(const char *, void *),
                 BOOL (*pfunc)(const char *, const char *, void *),
				 void *userdata);

/* The following definitions come from param/generic.c  */

struct param_section *param_get_section(struct param_context *ctx, const char *name);
struct param *param_section_get (struct param_section *section, const char *name);
struct param *param_get (struct param_context *ctx, const char *section_name, const char *name);
const char *param_get_string(struct param_context *ctx, const char *section, const char *param);
int param_set_string(struct param_context *ctx, const char *section, const char *param, const char *value);
const char **param_get_string_list(struct param_context *ctx, const char *section, const char *param,
				 const char *separator);
int param_set_string_list(struct param_context *ctx, const char *section, const char *param, const char **list);
int param_get_int(struct param_context *ctx, const char *section, const char *param, int default_v);
void param_set_int(struct param_context *ctx, const char *section, const char *param, int value);
unsigned long param_get_ulong(struct param_context *ctx, const char *section, const char *param, unsigned long default_v);
void param_set_ulong(struct param_context *ctx, const char *section, const char *name, unsigned long value);
struct param_context *param_init(TALLOC_CTX *mem_ctx);
int param_read(struct param_context *ctx, const char *fn);
int param_write(struct param_context *ctx, const char *fn);

/* The following definitions come from param/util.c  */

_PUBLIC_ BOOL is_myname(const char *name);
_PUBLIC_ char *lock_path(TALLOC_CTX* mem_ctx, const char *name);
_PUBLIC_ char *data_path(TALLOC_CTX* mem_ctx, const char *name);
_PUBLIC_ char *private_path(TALLOC_CTX* mem_ctx, const char *name);
_PUBLIC_ char *smbd_tmp_path(TALLOC_CTX *mem_ctx, const char *name);
_PUBLIC_ init_module_fn *load_samba_modules(TALLOC_CTX *mem_ctx, const char *subsystem);

/* The following definitions come from lib/version.c  */

const char *samba_version_string(void);
#undef _PRINTF_ATTRIBUTE
#define _PRINTF_ATTRIBUTE(a1, a2)

#endif /* __PARAM_PROTO_H__ */

