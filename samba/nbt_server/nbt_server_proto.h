/*
 * SPDX-License-Identifier: GPL-2.0-or-later
 */

#ifndef __NBT_SERVER_NBT_SERVER_PROTO_H__
#define __NBT_SERVER_NBT_SERVER_PROTO_H__

#undef _PRINTF_ATTRIBUTE
#define _PRINTF_ATTRIBUTE(a1, a2) PRINTF_ATTRIBUTE(a1, a2)
/* This file was automatically generated by mkproto.pl. DO NOT EDIT */

#ifndef _PUBLIC_
#define _PUBLIC_
#endif


/* The following definitions come from nbt_server/nbt_server.c  */

NTSTATUS server_service_nbtd_init(void);

/* The following definitions come from nbt_server/interfaces.c  */

struct nbtd_iface_name *nbtd_find_iname(struct nbtd_interface *iface, 
					struct nbt_name *name, 
					uint16_t nb_flags);
NTSTATUS nbtd_startup_interfaces(struct nbtd_server *nbtsrv);
const char **nbtd_address_list(struct nbtd_interface *iface, TALLOC_CTX *mem_ctx);
struct nbtd_interface *nbtd_find_request_iface(struct nbtd_server *nbtd_server,
					       const char *address, BOOL allow_bcast_iface);
struct nbtd_interface *nbtd_find_reply_iface(struct nbtd_interface *iface,
					     const char *address, BOOL allow_bcast_iface);

/* The following definitions come from nbt_server/register.c  */

void nbtd_register_names(struct nbtd_server *nbtsrv);

/* The following definitions come from nbt_server/query.c  */

void nbtd_request_query(struct nbt_name_socket *nbtsock, 
			struct nbt_name_packet *packet, 
			struct socket_address *src);

/* The following definitions come from nbt_server/nodestatus.c  */

void nbtd_query_status(struct nbt_name_socket *nbtsock, 
		       struct nbt_name_packet *packet, 
		       struct socket_address *src);

/* The following definitions come from nbt_server/defense.c  */

void nbtd_request_defense(struct nbt_name_socket *nbtsock, 
			  struct nbt_name_packet *packet, 
			  struct socket_address *src);

/* The following definitions come from nbt_server/packet.c  */

void nbtd_bad_packet(struct nbt_name_packet *packet, 
		     const struct socket_address *src, const char *reason);
BOOL nbtd_self_packet_and_bcast(struct nbt_name_socket *nbtsock, 
				struct nbt_name_packet *packet, 
				const struct socket_address *src);
BOOL nbtd_self_packet(struct nbt_name_socket *nbtsock, 
		      struct nbt_name_packet *packet, 
		      const struct socket_address *src);
void nbtd_name_query_reply(struct nbt_name_socket *nbtsock, 
			   struct nbt_name_packet *request_packet, 
			   struct socket_address *src,
			   struct nbt_name *name, uint32_t ttl,
			   uint16_t nb_flags, const char **addresses);
void nbtd_negative_name_query_reply(struct nbt_name_socket *nbtsock, 
				    struct nbt_name_packet *request_packet, 
				    struct socket_address *src);
void nbtd_name_registration_reply(struct nbt_name_socket *nbtsock, 
				  struct nbt_name_packet *request_packet, 
				  struct socket_address *src,
				  uint8_t rcode);
void nbtd_name_release_reply(struct nbt_name_socket *nbtsock, 
			     struct nbt_name_packet *request_packet, 
			     struct socket_address *src,
			     uint8_t rcode);
void nbtd_wack_reply(struct nbt_name_socket *nbtsock, 
		     struct nbt_name_packet *request_packet, 
		     struct socket_address *src,
		     uint32_t ttl);

/* The following definitions come from nbt_server/irpc.c  */

void nbtd_register_irpc(struct nbtd_server *nbtsrv);
#undef _PRINTF_ATTRIBUTE
#define _PRINTF_ATTRIBUTE(a1, a2)

#endif /* __NBT_SERVER_NBT_SERVER_PROTO_H__ */

