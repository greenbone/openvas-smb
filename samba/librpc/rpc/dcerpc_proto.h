#ifndef __LIBRPC_RPC_DCERPC_PROTO_H__
#define __LIBRPC_RPC_DCERPC_PROTO_H__

#undef _PRINTF_ATTRIBUTE
#define _PRINTF_ATTRIBUTE(a1, a2) PRINTF_ATTRIBUTE(a1, a2)
/* This file was automatically generated by mkproto.pl. DO NOT EDIT */

#ifndef _PUBLIC_
#define _PUBLIC_
#endif


/* The following definitions come from librpc/rpc/dcerpc.c  */

NTSTATUS dcerpc_init(void);
struct dcerpc_pipe *dcerpc_pipe_init(TALLOC_CTX *mem_ctx, struct event_context *ev);
void dcerpc_set_frag_length(DATA_BLOB *blob, uint16_t v);
uint16_t dcerpc_get_frag_length(const DATA_BLOB *blob);
void dcerpc_set_auth_length(DATA_BLOB *blob, uint16_t v);
struct composite_context *dcerpc_bind_send(struct dcerpc_pipe *p,
					   TALLOC_CTX *mem_ctx,
					   const struct dcerpc_syntax_id *syntax,
					   const struct dcerpc_syntax_id *transfer_syntax);
NTSTATUS dcerpc_bind_recv(struct composite_context *ctx);
NTSTATUS dcerpc_auth3(struct dcerpc_connection *c,
		      TALLOC_CTX *mem_ctx);
struct event_context *dcerpc_event_context(struct dcerpc_pipe *p);
NTSTATUS dcerpc_request_recv(struct rpc_request *req,
			     TALLOC_CTX *mem_ctx,
			     DATA_BLOB *stub_data);
NTSTATUS dcerpc_request(struct dcerpc_pipe *p,
			struct GUID *object,
			uint16_t opnum,
			BOOL async,
			TALLOC_CTX *mem_ctx,
			DATA_BLOB *stub_data_in,
			DATA_BLOB *stub_data_out);
struct rpc_request *dcerpc_ndr_request_send(struct dcerpc_pipe *p,
						const struct GUID *object,
						const struct dcerpc_interface_table *table,
						uint32_t opnum,
						TALLOC_CTX *mem_ctx,
						void *r);
_PUBLIC_ NTSTATUS dcerpc_ndr_request_recv(struct rpc_request *req);
NTSTATUS dcerpc_ndr_request(struct dcerpc_pipe *p,
			    const struct GUID *object,
			    const struct dcerpc_interface_table *table,
			    uint32_t opnum,
			    TALLOC_CTX *mem_ctx,
			    void *r);
const char *dcerpc_server_name(struct dcerpc_pipe *p);
uint32_t dcerpc_auth_level(struct dcerpc_connection *c);
struct composite_context *dcerpc_alter_context_send(struct dcerpc_pipe *p,
						    TALLOC_CTX *mem_ctx,
						    const struct dcerpc_syntax_id *syntax,
						    const struct dcerpc_syntax_id *transfer_syntax);
NTSTATUS dcerpc_alter_context_recv(struct composite_context *ctx);
NTSTATUS dcerpc_alter_context(struct dcerpc_pipe *p,
			      TALLOC_CTX *mem_ctx,
			      const struct dcerpc_syntax_id *syntax,
			      const struct dcerpc_syntax_id *transfer_syntax);

/* The following definitions come from librpc/rpc/dcerpc_auth.c  */

struct composite_context *dcerpc_bind_auth_none_send(TALLOC_CTX *mem_ctx,
						     struct dcerpc_pipe *p,
						     const struct dcerpc_interface_table *table);
NTSTATUS dcerpc_bind_auth_none_recv(struct composite_context *ctx);
NTSTATUS dcerpc_bind_auth_none(struct dcerpc_pipe *p,
			       const struct dcerpc_interface_table *table);
struct composite_context *dcerpc_bind_auth_send(TALLOC_CTX *mem_ctx,
						struct dcerpc_pipe *p,
						const struct dcerpc_interface_table *table,
						struct cli_credentials *credentials,
						uint8_t auth_type, uint8_t auth_level,
						const char *service);
NTSTATUS dcerpc_bind_auth_recv(struct composite_context *creq);
NTSTATUS dcerpc_bind_auth(struct dcerpc_pipe *p,
			  const struct dcerpc_interface_table *table,
			  struct cli_credentials *credentials,
			  uint8_t auth_type, uint8_t auth_level,
			  const char *service);

/* The following definitions come from librpc/rpc/dcerpc_schannel.c  */

struct composite_context *dcerpc_schannel_key_send(TALLOC_CTX *mem_ctx,
						   struct dcerpc_pipe *p,
						   struct cli_credentials *credentials);
NTSTATUS dcerpc_schannel_key_recv(struct composite_context *c);
struct composite_context *dcerpc_bind_auth_schannel_send(TALLOC_CTX *tmp_ctx, 
							 struct dcerpc_pipe *p,
							 const struct dcerpc_interface_table *table,
							 struct cli_credentials *credentials,
							 uint8_t auth_level);
NTSTATUS dcerpc_bind_auth_schannel_recv(struct composite_context *c);
NTSTATUS dcerpc_bind_auth_schannel(TALLOC_CTX *tmp_ctx, 
				   struct dcerpc_pipe *p,
				   const struct dcerpc_interface_table *table,
				   struct cli_credentials *credentials,
				   uint8_t auth_level);

/* The following definitions come from librpc/rpc/dcerpc_util.c  */

const struct dcerpc_interface_call *dcerpc_iface_find_call(const struct dcerpc_interface_table *iface,
							   const char *name);
NTSTATUS ncacn_push_auth(DATA_BLOB *blob, TALLOC_CTX *mem_ctx, 
			  struct ncacn_packet *pkt,
			  struct dcerpc_auth *auth_info);
const char *epm_floor_string(TALLOC_CTX *mem_ctx, struct epm_floor *epm_floor);
const char *dcerpc_binding_string(TALLOC_CTX *mem_ctx, const struct dcerpc_binding *b);
NTSTATUS dcerpc_parse_binding(TALLOC_CTX *mem_ctx, const char *s, struct dcerpc_binding **b_out);
NTSTATUS dcerpc_floor_get_lhs_data(struct epm_floor *epm_floor, struct dcerpc_syntax_id *syntax);
const char *dcerpc_floor_get_rhs_data(TALLOC_CTX *mem_ctx, struct epm_floor *epm_floor);
enum dcerpc_transport_t dcerpc_transport_by_endpoint_protocol(int prot);
enum dcerpc_transport_t dcerpc_transport_by_tower(struct epm_tower *tower);
NTSTATUS dcerpc_binding_from_tower(TALLOC_CTX *mem_ctx, struct epm_tower *tower, struct dcerpc_binding **b_out);
NTSTATUS dcerpc_binding_build_tower(TALLOC_CTX *mem_ctx, struct dcerpc_binding *binding, struct epm_tower *tower);
struct composite_context *dcerpc_epm_map_binding_send(TALLOC_CTX *mem_ctx,
						      struct dcerpc_binding *binding,
						      const struct dcerpc_interface_table *table,
						      struct event_context *ev);
NTSTATUS dcerpc_epm_map_binding_recv(struct composite_context *c);
NTSTATUS dcerpc_epm_map_binding(TALLOC_CTX *mem_ctx, struct dcerpc_binding *binding,
				const struct dcerpc_interface_table *table, struct event_context *ev);
struct composite_context *dcerpc_pipe_auth_send(struct dcerpc_pipe *p, 
						struct dcerpc_binding *binding,
						const struct dcerpc_interface_table *table,
						struct cli_credentials *credentials);
NTSTATUS dcerpc_pipe_auth_recv(struct composite_context *c, TALLOC_CTX *mem_ctx, 
			       struct dcerpc_pipe **p);
NTSTATUS dcerpc_pipe_auth(TALLOC_CTX *mem_ctx,
			  struct dcerpc_pipe **p, 
			  struct dcerpc_binding *binding,
			  const struct dcerpc_interface_table *table,
			  struct cli_credentials *credentials);
NTSTATUS dcerpc_generic_session_key(struct dcerpc_connection *c,
				    DATA_BLOB *session_key);
NTSTATUS dcerpc_fetch_session_key(struct dcerpc_pipe *p,
				  DATA_BLOB *session_key);
void dcerpc_log_packet(const struct dcerpc_interface_table *ndr,
		       uint32_t opnum, uint32_t flags, DATA_BLOB *pkt);
NTSTATUS dcerpc_secondary_context(struct dcerpc_pipe *p, 
				  struct dcerpc_pipe **pp2,
				  const struct dcerpc_interface_table *table);

/* The following definitions come from librpc/rpc/dcerpc_error.c  */

const char *dcerpc_errstr(TALLOC_CTX *mem_ctx, uint32_t fault_code);

/* The following definitions come from librpc/rpc/dcerpc_smb.c  */

struct composite_context *dcerpc_pipe_open_smb_send(struct dcerpc_connection *c, 
						    struct smbcli_tree *tree,
						    const char *pipe_name);
NTSTATUS dcerpc_pipe_open_smb_recv(struct composite_context *c);
NTSTATUS dcerpc_pipe_open_smb(struct dcerpc_connection *c,
			      struct smbcli_tree *tree,
			      const char *pipe_name);
struct smbcli_tree *dcerpc_smb_tree(struct dcerpc_connection *c);

/* The following definitions come from librpc/rpc/dcerpc_smb2.c  */

struct composite_context *dcerpc_pipe_open_smb2_send(struct dcerpc_connection *c, 
						     struct smb2_tree *tree,
						     const char *pipe_name);
NTSTATUS dcerpc_pipe_open_smb2_recv(struct composite_context *c);
NTSTATUS dcerpc_pipe_open_smb2(struct dcerpc_connection *c,
			       struct smb2_tree *tree,
			       const char *pipe_name);
struct smb2_tree *dcerpc_smb2_tree(struct dcerpc_connection *c);

/* The following definitions come from librpc/rpc/dcerpc_sock.c  */

struct composite_context *dcerpc_pipe_open_socket_send(TALLOC_CTX *mem_ctx,
						       struct dcerpc_connection *cn,
						       struct socket_address *server,
						       const char *target_hostname,
						       enum dcerpc_transport_t transport);
NTSTATUS dcerpc_pipe_open_socket_recv(struct composite_context *c);
NTSTATUS dcerpc_pipe_open_socket(struct dcerpc_connection *conn,
				 struct socket_address *server,
				 const char *target_hostname,
				 enum dcerpc_transport_t transport);
struct composite_context* dcerpc_pipe_open_tcp_send(struct dcerpc_connection *conn,
						    const char *server,
						    const char *target_hostname,
						    uint32_t port);
NTSTATUS dcerpc_pipe_open_tcp_recv(struct composite_context *c);
NTSTATUS dcerpc_pipe_open_tcp(struct dcerpc_connection *conn, const char *server,
			      const char *target_hostname,
			      uint32_t port);
void continue_unix_open_socket(struct composite_context *ctx);
struct composite_context *dcerpc_pipe_open_unix_stream_send(struct dcerpc_connection *conn,
							    const char *path);
NTSTATUS dcerpc_pipe_open_unix_stream_recv(struct composite_context *c);
NTSTATUS dcerpc_pipe_open_unix_stream(struct dcerpc_connection *conn, const char *path);
void continue_np_open_socket(struct composite_context *ctx);
struct composite_context* dcerpc_pipe_open_pipe_send(struct dcerpc_connection *conn,
						     const char *identifier);
NTSTATUS dcerpc_pipe_open_pipe_recv(struct composite_context *c);
NTSTATUS dcerpc_pipe_open_pipe(struct dcerpc_connection *conn, const char *identifier);

/* The following definitions come from librpc/rpc/dcerpc_connect.c  */

struct composite_context* dcerpc_pipe_connect_b_send(TALLOC_CTX *parent_ctx,
						     struct dcerpc_binding *binding,
						     const struct dcerpc_interface_table *table,
						     struct cli_credentials *credentials,
						     struct event_context *ev);
NTSTATUS dcerpc_pipe_connect_b_recv(struct composite_context *c, TALLOC_CTX *mem_ctx,
				    struct dcerpc_pipe **p);
NTSTATUS dcerpc_pipe_connect_b(TALLOC_CTX *parent_ctx,
			       struct dcerpc_pipe **pp,
			       struct dcerpc_binding *binding,
			       const struct dcerpc_interface_table *table,
			       struct cli_credentials *credentials,
			       struct event_context *ev);
struct composite_context* dcerpc_pipe_connect_send(TALLOC_CTX *parent_ctx,
						   const char *binding,
						   const struct dcerpc_interface_table *table,
						   struct cli_credentials *credentials,
						   struct event_context *ev);
NTSTATUS dcerpc_pipe_connect_recv(struct composite_context *c,
				  TALLOC_CTX *mem_ctx,
				  struct dcerpc_pipe **pp);
NTSTATUS dcerpc_pipe_connect(TALLOC_CTX *parent_ctx, 
			     struct dcerpc_pipe **pp, 
			     const char *binding,
			     const struct dcerpc_interface_table *table,
			     struct cli_credentials *credentials,
			     struct event_context *ev);
struct composite_context* dcerpc_secondary_connection_send(struct dcerpc_pipe *p,
							   struct dcerpc_binding *b);
NTSTATUS dcerpc_secondary_connection_recv(struct composite_context *c,
					  struct dcerpc_pipe **p2);
NTSTATUS dcerpc_secondary_connection(struct dcerpc_pipe *p,
				     struct dcerpc_pipe **p2,
				     struct dcerpc_binding *b);
#undef _PRINTF_ATTRIBUTE
#define _PRINTF_ATTRIBUTE(a1, a2)

#endif /* __LIBRPC_RPC_DCERPC_PROTO_H__ */

