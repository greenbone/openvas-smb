#ifndef __LIBCLI_AUTH_PROTO_H__
#define __LIBCLI_AUTH_PROTO_H__

#undef _PRINTF_ATTRIBUTE
#define _PRINTF_ATTRIBUTE(a1, a2) PRINTF_ATTRIBUTE(a1, a2)
/* This file was automatically generated by mkproto.pl. DO NOT EDIT */

#ifndef _PUBLIC_
#define _PUBLIC_
#endif


/* The following definitions come from libcli/auth/credentials.c  */

void creds_des_encrypt_LMKey(struct creds_CredentialState *creds, struct netr_LMSessionKey *key);
void creds_des_decrypt_LMKey(struct creds_CredentialState *creds, struct netr_LMSessionKey *key);
void creds_des_encrypt(struct creds_CredentialState *creds, struct samr_Password *pass);
void creds_des_decrypt(struct creds_CredentialState *creds, struct samr_Password *pass);
void creds_arcfour_crypt(struct creds_CredentialState *creds, uint8_t *data, size_t len);
void creds_client_init(struct creds_CredentialState *creds,
		       const struct netr_Credential *client_challenge,
		       const struct netr_Credential *server_challenge,
		       const struct samr_Password *machine_password,
		       struct netr_Credential *initial_credential,
		       uint32_t negotiate_flags);
void creds_client_authenticator(struct creds_CredentialState *creds,
				struct netr_Authenticator *next);
BOOL creds_client_check(struct creds_CredentialState *creds,
			const struct netr_Credential *received_credentials);
void creds_server_init(struct creds_CredentialState *creds,
		       const struct netr_Credential *client_challenge,
		       const struct netr_Credential *server_challenge,
		       const struct samr_Password *machine_password,
		       struct netr_Credential *initial_credential,
		       uint32_t negotiate_flags);
BOOL creds_server_check(const struct creds_CredentialState *creds,
			const struct netr_Credential *received_credentials);
NTSTATUS creds_server_step_check(struct creds_CredentialState *creds,
				 struct netr_Authenticator *received_authenticator,
				 struct netr_Authenticator *return_authenticator) ;
void creds_decrypt_samlogon(struct creds_CredentialState *creds,
			    uint16_t validation_level,
			    union netr_Validation *validation) ;

/* The following definitions come from libcli/auth/session.c  */

void sess_crypt_blob(DATA_BLOB *out, const DATA_BLOB *in, const DATA_BLOB *session_key,
		     BOOL forward);
DATA_BLOB sess_encrypt_string(const char *str, const DATA_BLOB *session_key);
char *sess_decrypt_string(TALLOC_CTX *mem_ctx, 
			  DATA_BLOB *blob, const DATA_BLOB *session_key);
DATA_BLOB sess_encrypt_blob(TALLOC_CTX *mem_ctx, DATA_BLOB *blob_in, const DATA_BLOB *session_key);
NTSTATUS sess_decrypt_blob(TALLOC_CTX *mem_ctx, const DATA_BLOB *blob, const DATA_BLOB *session_key, 
			   DATA_BLOB *ret);

/* The following definitions come from libcli/auth/smbencrypt.c  */

BOOL SMBencrypt(const char *passwd, const uint8_t *c8, uint8_t p24[24]);
_PUBLIC_ BOOL E_md4hash(const char *passwd, uint8_t p16[16]);
_PUBLIC_ BOOL E_deshash(const char *passwd, uint8_t p16[16]);
BOOL ntv2_owf_gen(const uint8_t owf[16],
		  const char *user_in, const char *domain_in,
		  BOOL upper_case_domain, /* Transform the domain into UPPER case */
		  uint8_t kr_buf[16]);
void SMBOWFencrypt(const uint8_t passwd[16], const uint8_t *c8, uint8_t p24[24]);
void SMBNTencrypt(const char *passwd, uint8_t *c8, uint8_t *p24);
void SMBOWFencrypt_ntv2(const uint8_t kr[16],
			const DATA_BLOB *srv_chal,
			const DATA_BLOB *smbcli_chal,
			uint8_t resp_buf[16]);
void SMBsesskeygen_ntv2(const uint8_t kr[16],
			const uint8_t * nt_resp, uint8_t sess_key[16]);
void SMBsesskeygen_ntv1(const uint8_t kr[16], uint8_t sess_key[16]);
void SMBsesskeygen_lm_sess_key(const uint8_t lm_hash[16],
			       const uint8_t lm_resp[24], /* only uses 8 */ 
			       uint8_t sess_key[16]);
DATA_BLOB NTLMv2_generate_names_blob(TALLOC_CTX *mem_ctx, 
				     const char *hostname, 
				     const char *domain);
BOOL SMBNTLMv2encrypt_hash(TALLOC_CTX *mem_ctx, 
			   const char *user, const char *domain, const uint8_t nt_hash[16],
			   const DATA_BLOB *server_chal, 
			   const DATA_BLOB *names_blob,
			   DATA_BLOB *lm_response, DATA_BLOB *nt_response, 
			   DATA_BLOB *lm_session_key, DATA_BLOB *user_session_key) ;
BOOL SMBNTLMv2encrypt(TALLOC_CTX *mem_ctx, 
		      const char *user, const char *domain, 
		      const char *password, 
		      const DATA_BLOB *server_chal, 
		      const DATA_BLOB *names_blob,
		      DATA_BLOB *lm_response, DATA_BLOB *nt_response, 
		      DATA_BLOB *lm_session_key, DATA_BLOB *user_session_key) ;
BOOL encode_pw_buffer(uint8_t buffer[516], const char *password, int string_flags);
BOOL decode_pw_buffer(uint8_t in_buffer[516], char *new_pwrd,
		      int new_pwrd_size, uint32_t *new_pw_len,
		      int string_flags);

/* The following definitions come from libcli/auth/smbdes.c  */

void des_crypt56(uint8_t out[8], const uint8_t in[8], const uint8_t key[7], int forw);
void E_P16(const uint8_t *p14,uint8_t *p16);
void E_P24(const uint8_t *p21, const uint8_t *c8, uint8_t *p24);
void D_P16(const uint8_t *p14, const uint8_t *in, uint8_t *out);
void E_old_pw_hash( uint8_t *p14, const uint8_t *in, uint8_t *out);
void des_crypt128(uint8_t out[8], const uint8_t in[8], const uint8_t key[16]);
void des_crypt64(uint8_t out[8], const uint8_t in[8], const uint8_t key[8], int forw);
void des_crypt112(uint8_t out[8], const uint8_t in[8], const uint8_t key[14], int forw);
void des_crypt112_16(uint8_t out[16], uint8_t in[16], const uint8_t key[14], int forw);
void sam_rid_crypt(uint_t rid, const uint8_t *in, uint8_t *out, int forw);
#undef _PRINTF_ATTRIBUTE
#define _PRINTF_ATTRIBUTE(a1, a2)

#endif /* __LIBCLI_AUTH_PROTO_H__ */

