#ifndef __LIBCLI_NBT_NBT_PROTO_H__
#define __LIBCLI_NBT_NBT_PROTO_H__

#undef _PRINTF_ATTRIBUTE
#define _PRINTF_ATTRIBUTE(a1, a2) PRINTF_ATTRIBUTE(a1, a2)
/* This file was automatically generated by mkproto.pl. DO NOT EDIT */

#ifndef _PUBLIC_
#define _PUBLIC_
#endif


/* The following definitions come from libcli/nbt/nbtsocket.c  */

_PUBLIC_ struct nbt_name_socket *nbt_name_socket_init(TALLOC_CTX *mem_ctx, 
					     struct event_context *event_ctx);
struct nbt_name_request *nbt_name_request_send(struct nbt_name_socket *nbtsock, 
					       struct socket_address *dest,
					       struct nbt_name_packet *request,
					       int timeout, int retries,
					       BOOL allow_multiple_replies);
NTSTATUS nbt_name_reply_send(struct nbt_name_socket *nbtsock, 
			     struct socket_address *dest,
			     struct nbt_name_packet *request);
NTSTATUS nbt_name_request_recv(struct nbt_name_request *req);
NTSTATUS nbt_set_incoming_handler(struct nbt_name_socket *nbtsock,
				  void (*handler)(struct nbt_name_socket *, struct nbt_name_packet *, 
						  struct socket_address *),
				  void *private);
NTSTATUS nbt_rcode_to_ntstatus(uint8_t rcode);

/* The following definitions come from libcli/nbt/namequery.c  */

_PUBLIC_ struct nbt_name_request *nbt_name_query_send(struct nbt_name_socket *nbtsock,
					     struct nbt_name_query *io);
_PUBLIC_ NTSTATUS nbt_name_query_recv(struct nbt_name_request *req, 
			     TALLOC_CTX *mem_ctx, struct nbt_name_query *io);
_PUBLIC_ NTSTATUS nbt_name_query(struct nbt_name_socket *nbtsock, 
			TALLOC_CTX *mem_ctx, struct nbt_name_query *io);
_PUBLIC_ struct nbt_name_request *nbt_name_status_send(struct nbt_name_socket *nbtsock,
					      struct nbt_name_status *io);
_PUBLIC_ NTSTATUS nbt_name_status_recv(struct nbt_name_request *req, 
			     TALLOC_CTX *mem_ctx, struct nbt_name_status *io);
_PUBLIC_ NTSTATUS nbt_name_status(struct nbt_name_socket *nbtsock, 
			TALLOC_CTX *mem_ctx, struct nbt_name_status *io);

/* The following definitions come from libcli/nbt/nameregister.c  */

struct nbt_name_request *nbt_name_register_send(struct nbt_name_socket *nbtsock,
						struct nbt_name_register *io);
NTSTATUS nbt_name_register_recv(struct nbt_name_request *req, 
				TALLOC_CTX *mem_ctx, struct nbt_name_register *io);
NTSTATUS nbt_name_register(struct nbt_name_socket *nbtsock, 
			   TALLOC_CTX *mem_ctx, struct nbt_name_register *io);
struct composite_context *nbt_name_register_bcast_send(struct nbt_name_socket *nbtsock,
						       struct nbt_name_register_bcast *io);
NTSTATUS nbt_name_register_bcast_recv(struct composite_context *c);
NTSTATUS nbt_name_register_bcast(struct nbt_name_socket *nbtsock,
				 struct nbt_name_register_bcast *io);
struct composite_context *nbt_name_register_wins_send(struct nbt_name_socket *nbtsock,
						      struct nbt_name_register_wins *io);
NTSTATUS nbt_name_register_wins_recv(struct composite_context *c, TALLOC_CTX *mem_ctx,
				     struct nbt_name_register_wins *io);
NTSTATUS nbt_name_register_wins(struct nbt_name_socket *nbtsock,
				TALLOC_CTX *mem_ctx,
				struct nbt_name_register_wins *io);

/* The following definitions come from libcli/nbt/namerefresh.c  */

struct nbt_name_request *nbt_name_refresh_send(struct nbt_name_socket *nbtsock,
					       struct nbt_name_refresh *io);
NTSTATUS nbt_name_refresh_recv(struct nbt_name_request *req, 
			       TALLOC_CTX *mem_ctx, struct nbt_name_refresh *io);
NTSTATUS nbt_name_refresh(struct nbt_name_socket *nbtsock, 
			   TALLOC_CTX *mem_ctx, struct nbt_name_refresh *io);
struct composite_context *nbt_name_refresh_wins_send(struct nbt_name_socket *nbtsock,
						      struct nbt_name_refresh_wins *io);
NTSTATUS nbt_name_refresh_wins_recv(struct composite_context *c, TALLOC_CTX *mem_ctx,
				     struct nbt_name_refresh_wins *io);
NTSTATUS nbt_name_refresh_wins(struct nbt_name_socket *nbtsock,
				TALLOC_CTX *mem_ctx,
				struct nbt_name_refresh_wins *io);

/* The following definitions come from libcli/nbt/namerelease.c  */

struct nbt_name_request *nbt_name_release_send(struct nbt_name_socket *nbtsock,
					       struct nbt_name_release *io);
NTSTATUS nbt_name_release_recv(struct nbt_name_request *req, 
			       TALLOC_CTX *mem_ctx, struct nbt_name_release *io);
NTSTATUS nbt_name_release(struct nbt_name_socket *nbtsock, 
			   TALLOC_CTX *mem_ctx, struct nbt_name_release *io);
#undef _PRINTF_ATTRIBUTE
#define _PRINTF_ATTRIBUTE(a1, a2)

#endif /* __LIBCLI_NBT_NBT_PROTO_H__ */

