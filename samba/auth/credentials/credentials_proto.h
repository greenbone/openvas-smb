#ifndef __AUTH_CREDENTIALS_CREDENTIALS_PROTO_H__
#define __AUTH_CREDENTIALS_CREDENTIALS_PROTO_H__

#undef _PRINTF_ATTRIBUTE
#define _PRINTF_ATTRIBUTE(a1, a2) PRINTF_ATTRIBUTE(a1, a2)
/* This file was automatically generated by mkproto.pl. DO NOT EDIT */

#ifndef _PUBLIC_
#define _PUBLIC_
#endif


/* The following definitions come from auth/credentials/credentials.c  */

struct cli_credentials *cli_credentials_init(TALLOC_CTX *mem_ctx) ;
void cli_credentials_set_kerberos_state(struct cli_credentials *creds, 
					enum credentials_use_kerberos use_kerberos);
enum credentials_use_kerberos cli_credentials_get_kerberos_state(struct cli_credentials *creds);
const char *cli_credentials_get_username(struct cli_credentials *cred);
BOOL cli_credentials_set_username(struct cli_credentials *cred, 
				  const char *val, enum credentials_obtained obtained);
BOOL cli_credentials_set_username_callback(struct cli_credentials *cred,
				  const char *(*username_cb) (struct cli_credentials *));
BOOL cli_credentials_set_bind_dn(struct cli_credentials *cred, 
				 const char *bind_dn);
const char *cli_credentials_get_bind_dn(struct cli_credentials *cred);
const char *cli_credentials_get_principal(struct cli_credentials *cred, TALLOC_CTX *mem_ctx);
BOOL cli_credentials_set_principal(struct cli_credentials *cred, 
				   const char *val, 
				   enum credentials_obtained obtained);
BOOL cli_credentials_set_principal_callback(struct cli_credentials *cred,
				  const char *(*principal_cb) (struct cli_credentials *));
BOOL cli_credentials_authentication_requested(struct cli_credentials *cred) ;
const char *cli_credentials_get_password(struct cli_credentials *cred);
BOOL cli_credentials_set_password(struct cli_credentials *cred, 
				  const char *val, 
				  enum credentials_obtained obtained);
BOOL cli_credentials_set_password_callback(struct cli_credentials *cred,
					   const char *(*password_cb) (struct cli_credentials *));
const char *cli_credentials_get_old_password(struct cli_credentials *cred);
BOOL cli_credentials_set_old_password(struct cli_credentials *cred, 
				      const char *val, 
				      enum credentials_obtained obtained);
const struct samr_Password *cli_credentials_get_nt_hash(struct cli_credentials *cred, 
							TALLOC_CTX *mem_ctx);
BOOL cli_credentials_set_nt_hash(struct cli_credentials *cred,
				 const struct samr_Password *nt_hash, 
				 enum credentials_obtained obtained);
const char *cli_credentials_get_domain(struct cli_credentials *cred);
BOOL cli_credentials_set_domain(struct cli_credentials *cred, 
				const char *val, 
				enum credentials_obtained obtained);
BOOL cli_credentials_set_domain_callback(struct cli_credentials *cred,
					 const char *(*domain_cb) (struct cli_credentials *));
const char *cli_credentials_get_realm(struct cli_credentials *cred);
BOOL cli_credentials_set_realm(struct cli_credentials *cred, 
			       const char *val, 
			       enum credentials_obtained obtained);
BOOL cli_credentials_set_realm_callback(struct cli_credentials *cred,
					const char *(*realm_cb) (struct cli_credentials *));
const char *cli_credentials_get_workstation(struct cli_credentials *cred);
BOOL cli_credentials_set_workstation(struct cli_credentials *cred, 
				     const char *val, 
				     enum credentials_obtained obtained);
BOOL cli_credentials_set_workstation_callback(struct cli_credentials *cred,
					      const char *(*workstation_cb) (struct cli_credentials *));
void cli_credentials_parse_string(struct cli_credentials *credentials, const char *data, enum credentials_obtained obtained);
const char *cli_credentials_get_unparsed_name(struct cli_credentials *credentials, TALLOC_CTX *mem_ctx);
void cli_credentials_set_conf(struct cli_credentials *cred);
void cli_credentials_guess(struct cli_credentials *cred);
void cli_credentials_set_netlogon_creds(struct cli_credentials *cred, 
					struct creds_CredentialState *netlogon_creds);
struct creds_CredentialState *cli_credentials_get_netlogon_creds(struct cli_credentials *cred);
void cli_credentials_set_secure_channel_type(struct cli_credentials *cred,
					     enum netr_SchannelType secure_channel_type);
enum netr_SchannelType cli_credentials_get_secure_channel_type(struct cli_credentials *cred);
void cli_credentials_set_anonymous(struct cli_credentials *cred) ;
BOOL cli_credentials_is_anonymous(struct cli_credentials *cred);
BOOL cli_credentials_wrong_password(struct cli_credentials *cred);

/* The following definitions come from auth/credentials/credentials_files.c  */

BOOL cli_credentials_parse_password_fd(struct cli_credentials *credentials, 
				       int fd, enum credentials_obtained obtained);
BOOL cli_credentials_parse_password_file(struct cli_credentials *credentials, const char *file, enum credentials_obtained obtained);
BOOL cli_credentials_parse_file(struct cli_credentials *cred, const char *file, enum credentials_obtained obtained) ;
NTSTATUS cli_credentials_set_secrets(struct cli_credentials *cred, 
				     const char *base,
				     const char *filter);
NTSTATUS cli_credentials_set_machine_account(struct cli_credentials *cred);
NTSTATUS cli_credentials_set_krbtgt(struct cli_credentials *cred);
NTSTATUS cli_credentials_set_stored_principal(struct cli_credentials *cred,
					      const char *serviceprincipal);
void cli_credentials_set_machine_account_pending(struct cli_credentials *cred);
NTSTATUS cli_credentials_update_all_keytabs(TALLOC_CTX *parent_ctx);

/* The following definitions come from auth/credentials/credentials_ntlm.c  */

void cli_credentials_get_ntlm_username_domain(struct cli_credentials *cred, TALLOC_CTX *mem_ctx, 
					      const char **username, 
					      const char **domain) ;
NTSTATUS cli_credentials_get_ntlm_response(struct cli_credentials *cred, TALLOC_CTX *mem_ctx, 
					   int *flags,
					   DATA_BLOB challenge, DATA_BLOB target_info, 
					   DATA_BLOB *_lm_response, DATA_BLOB *_nt_response, 
					   DATA_BLOB *_lm_session_key, DATA_BLOB *_session_key) ;
#undef _PRINTF_ATTRIBUTE
#define _PRINTF_ATTRIBUTE(a1, a2)

#endif /* __AUTH_CREDENTIALS_CREDENTIALS_PROTO_H__ */

