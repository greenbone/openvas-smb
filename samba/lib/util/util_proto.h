/*
 * SPDX-License-Identifier: GPL-2.0-or-later
 */

#ifndef __LIB_UTIL_UTIL_PROTO_H__
#define __LIB_UTIL_UTIL_PROTO_H__

#undef _PRINTF_ATTRIBUTE
#define _PRINTF_ATTRIBUTE(a1, a2) PRINTF_ATTRIBUTE(a1, a2)
/* This file was automatically generated by mkproto.pl. DO NOT EDIT */

#ifndef _PUBLIC_
#define _PUBLIC_
#endif


/* The following definitions come from lib/util/xfile.c  */

int x_setvbuf(XFILE *f, char *buf, int mode, size_t size);
XFILE *x_fopen(const char *fname, int flags, mode_t mode);
int x_fclose(XFILE *f);
size_t x_fwrite(const void *p, size_t size, size_t nmemb, XFILE *f);
int x_fileno(XFILE *f);
int x_fflush(XFILE *f);
void x_setbuffer(XFILE *f, char *buf, size_t size);
void x_setbuf(XFILE *f, char *buf);
void x_setlinebuf(XFILE *f);
int x_feof(XFILE *f);
int x_ferror(XFILE *f);
int x_fgetc(XFILE *f);
size_t x_fread(void *p, size_t size, size_t nmemb, XFILE *f);
char *x_fgets(char *s, int size, XFILE *stream) ;
off_t x_tseek(XFILE *f, off_t offset, int whence);

/* The following definitions come from lib/util/debug.c  */

_PUBLIC_ void debug_schedule_reopen_logs(void);
_PUBLIC_ void do_debug_header(int level, const char *location, const char *func);
_PUBLIC_ void do_debug(const char *format, ...) _PRINTF_ATTRIBUTE(1,2);
_PUBLIC_ void reopen_logs(void);
_PUBLIC_ void setup_logging(const char *prog_name, enum debug_logtype new_logtype);
_PUBLIC_ const char *do_debug_tab(int n);
_PUBLIC_ void log_suspicious_usage(const char *from, const char *info);
_PUBLIC_ void print_suspicious_usage(const char* from, const char* info);
_PUBLIC_ uint32_t get_task_id(void);
_PUBLIC_ void log_task_id(void);
_PUBLIC_ void register_debug_handlers(const char *name, struct debug_ops *ops);

/* The following definitions come from lib/util/fault.c  */

_PUBLIC_ void call_backtrace(void);
_PUBLIC_ void smb_panic(const char *why);
_PUBLIC_ void fault_setup(const char *pname);
_PUBLIC_ BOOL register_fault_handler(const char *name, void (*fault_handler)(int sig));

/* The following definitions come from lib/util/signal.c  */

void BlockSignals(BOOL block,int signum);
void (*CatchSignal(int signum,void (*handler)(int )))(int);
void CatchChild(void);
void CatchChildLeaveStatus(void);

/* The following definitions come from lib/util/system.c  */

_PUBLIC_ struct hostent *sys_gethostbyname(const char *name);
_PUBLIC_ const char *sys_inet_ntoa(struct ipv4_addr in);
_PUBLIC_ struct ipv4_addr sys_inet_makeaddr(int net, int host);

/* The following definitions come from lib/util/time.c  */

_PUBLIC_ time_t get_time_t_max(void);
_PUBLIC_ void GetTimeOfDay(struct timeval *tval);
_PUBLIC_ time_t nt_time_to_unix(NTTIME nt);
_PUBLIC_ void unix_to_nt_time(NTTIME *nt, time_t t);
_PUBLIC_ BOOL null_time(time_t t);
_PUBLIC_ BOOL null_nttime(NTTIME t);
_PUBLIC_ void push_dos_date(uint8_t *buf, int offset, time_t unixdate, int zone_offset);
_PUBLIC_ void push_dos_date2(uint8_t *buf,int offset,time_t unixdate, int zone_offset);
_PUBLIC_ void push_dos_date3(uint8_t *buf,int offset,time_t unixdate, int zone_offset);
_PUBLIC_ time_t pull_dos_date(const uint8_t *date_ptr, int zone_offset);
_PUBLIC_ time_t pull_dos_date2(const uint8_t *date_ptr, int zone_offset);
_PUBLIC_ time_t pull_dos_date3(const uint8_t *date_ptr, int zone_offset);
_PUBLIC_ char *http_timestring(TALLOC_CTX *mem_ctx, time_t t);
_PUBLIC_ char *timestring(TALLOC_CTX *mem_ctx, time_t t);
_PUBLIC_ const char *nt_time_string(TALLOC_CTX *mem_ctx, NTTIME nt);
_PUBLIC_ void push_nttime(uint8_t *base, uint16_t offset, NTTIME t);
_PUBLIC_ NTTIME pull_nttime(uint8_t *base, uint16_t offset);
_PUBLIC_ NTTIME nttime_from_string(const char *s);
_PUBLIC_ int64_t usec_time_diff(struct timeval *tv1, struct timeval *tv2);
_PUBLIC_ struct timeval timeval_zero(void);
_PUBLIC_ BOOL timeval_is_zero(const struct timeval *tv);
_PUBLIC_ struct timeval timeval_current(void);
_PUBLIC_ struct timeval timeval_set(uint32_t secs, uint32_t usecs);
_PUBLIC_ struct timeval timeval_add(const struct timeval *tv,
			   uint32_t secs, uint32_t usecs);
struct timeval timeval_sum(const struct timeval *tv1,
			   const struct timeval *tv2);
_PUBLIC_ struct timeval timeval_current_ofs(uint32_t secs, uint32_t usecs);
_PUBLIC_ int timeval_compare(const struct timeval *tv1, const struct timeval *tv2);
_PUBLIC_ BOOL timeval_expired(const struct timeval *tv);
_PUBLIC_ double timeval_elapsed2(const struct timeval *tv1, const struct timeval *tv2);
_PUBLIC_ double timeval_elapsed(const struct timeval *tv);
_PUBLIC_ struct timeval timeval_min(const struct timeval *tv1,
			   const struct timeval *tv2);
_PUBLIC_ struct timeval timeval_max(const struct timeval *tv1,
			   const struct timeval *tv2);
_PUBLIC_ struct timeval timeval_until(const struct timeval *tv1,
			     const struct timeval *tv2);
_PUBLIC_ NTTIME timeval_to_nttime(const struct timeval *tv);
_PUBLIC_ void nttime_to_timeval(struct timeval *tv, NTTIME t);
_PUBLIC_ int get_time_zone(time_t t);

/* The following definitions come from lib/util/genrand.c  */

_PUBLIC_ void set_rand_reseed_callback(void (*fn)(int *));
_PUBLIC_ void set_need_random_reseed(void);
_PUBLIC_ void generate_random_buffer(uint8_t *out, int len);
_PUBLIC_ uint32_t generate_random(void);
_PUBLIC_ BOOL check_password_quality(const char *s);
_PUBLIC_ char *generate_random_str_list(TALLOC_CTX *mem_ctx, size_t len, const char *list);
_PUBLIC_ char *generate_random_str(TALLOC_CTX *mem_ctx, size_t len);

/* The following definitions come from lib/util/dprintf.c  */

_PUBLIC_ int d_vfprintf(FILE *f, const char *format, va_list ap) _PRINTF_ATTRIBUTE(2,0);
_PUBLIC_ int d_fprintf(FILE *f, const char *format, ...) _PRINTF_ATTRIBUTE(2,3);
_PUBLIC_ int d_printf(const char *format, ...) _PRINTF_ATTRIBUTE(1,2);
_PUBLIC_ void display_set_stderr(void);

/* The following definitions come from lib/util/util_str.c  */

_PUBLIC_ BOOL trim_string(char *s,const char *front,const char *back);
_PUBLIC_ size_t count_chars(const char *s, char c);
_PUBLIC_ char *safe_strcpy(char *dest,const char *src, size_t maxlength);
_PUBLIC_ char *safe_strcat(char *dest, const char *src, size_t maxlength);
_PUBLIC_ size_t strhex_to_str(char *p, size_t len, const char *strhex);
_PUBLIC_ DATA_BLOB strhex_to_data_blob(const char *strhex) ;
_PUBLIC_ void hex_encode(const unsigned char *buff_in, size_t len, char **out_hex_buffer);
_PUBLIC_ BOOL in_list(const char *s, const char *list, BOOL casesensitive);
_PUBLIC_ void string_free(char **s);
_PUBLIC_ BOOL string_set(char **dest, const char *src);
_PUBLIC_ void string_sub(char *s,const char *pattern, const char *insert, size_t len);
_PUBLIC_ void all_string_sub(char *s,const char *pattern,const char *insert, size_t len);
_PUBLIC_ void rfc1738_unescape(char *buf);
size_t valgrind_strlen(const char *s);
_PUBLIC_ const char *str_format_nbt_domain(TALLOC_CTX *mem_ctx, const char *s);
_PUBLIC_ BOOL add_string_to_array(TALLOC_CTX *mem_ctx,
			 const char *str, const char ***strings, int *num);
_PUBLIC_ int strcmp_safe(const char *s1, const char *s2);
_PUBLIC_ size_t ascii_len_n(const char *src, size_t n);
_PUBLIC_ char *attrib_string(TALLOC_CTX *mem_ctx, uint32_t attrib);
_PUBLIC_ BOOL set_boolean(const char *boolean_string, BOOL *boolean);
_PUBLIC_ BOOL conv_str_bool(const char * str, BOOL * val);
_PUBLIC_ BOOL conv_str_size(const char * str, uint64_t * val);
_PUBLIC_ BOOL conv_str_u64(const char * str, uint64_t * val);
_PUBLIC_ size_t utf16_len(const void *buf);
_PUBLIC_ size_t utf16_len_n(const void *src, size_t n);
_PUBLIC_ size_t ucs2_align(const void *base_ptr, const void *p, int flags);
_PUBLIC_ int strwicmp(const char *psz1, const char *psz2);
_PUBLIC_ void string_replace(char *s, char oldc, char newc);
_PUBLIC_ BOOL strequal(const char *s1, const char *s2);

/* The following definitions come from lib/util/util_strlist.c  */

_PUBLIC_ const char **str_list_make(TALLOC_CTX *mem_ctx, const char *string, const char *sep);
_PUBLIC_ const char **str_list_make_shell(TALLOC_CTX *mem_ctx, const char *string, const char *sep);
_PUBLIC_ char *str_list_join(TALLOC_CTX *mem_ctx, const char **list, char seperator);
_PUBLIC_ char *str_list_join_shell(TALLOC_CTX *mem_ctx, const char **list, char sep);
_PUBLIC_ size_t str_list_length(const char **list);
_PUBLIC_ const char **str_list_copy(TALLOC_CTX *mem_ctx, const char **list);
_PUBLIC_ BOOL str_list_equal(const char **list1, const char **list2);
_PUBLIC_ const char **str_list_add(const char **list, const char *s);
_PUBLIC_ void str_list_remove(const char **list, const char *s);
_PUBLIC_ BOOL str_list_check(const char **list, const char *s);
_PUBLIC_ BOOL str_list_check_ci(const char **list, const char *s);

/* The following definitions come from lib/util/util_file.c  */

_PUBLIC_ char *fgets_slash(char *s2,int maxlen,XFILE *f);
_PUBLIC_ char *afdgets(int fd, TALLOC_CTX *mem_ctx, size_t hint);
_PUBLIC_ char *fd_load(int fd, size_t *size, TALLOC_CTX *mem_ctx);
_PUBLIC_ char *file_load(const char *fname, size_t *size, TALLOC_CTX *mem_ctx);
_PUBLIC_ void *map_file(const char *fname, size_t size);
_PUBLIC_ char **file_lines_load(const char *fname, int *numlines, TALLOC_CTX *mem_ctx);
_PUBLIC_ char **fd_lines_load(int fd, int *numlines, TALLOC_CTX *mem_ctx);
_PUBLIC_ void file_lines_slashcont(char **lines);
_PUBLIC_ BOOL file_save(const char *fname, const void *packet, size_t length);
_PUBLIC_ int vfdprintf(int fd, const char *format, va_list ap) _PRINTF_ATTRIBUTE(2,0);
_PUBLIC_ int fdprintf(int fd, const char *format, ...) _PRINTF_ATTRIBUTE(2,3);
_PUBLIC_ bool large_file_support(const char *path);

/* The following definitions come from lib/util/data_blob.c  */

_PUBLIC_ DATA_BLOB data_blob_named(const void *p, size_t length, const char *name);
_PUBLIC_ DATA_BLOB data_blob_talloc_named(TALLOC_CTX *mem_ctx, const void *p, size_t length, const char *name);
_PUBLIC_ DATA_BLOB data_blob_talloc_reference(TALLOC_CTX *mem_ctx, DATA_BLOB *blob);
_PUBLIC_ DATA_BLOB data_blob_talloc_zero(TALLOC_CTX *mem_ctx, size_t length);
_PUBLIC_ void data_blob_free(DATA_BLOB *d);
_PUBLIC_ void data_blob_clear(DATA_BLOB *d);
_PUBLIC_ void data_blob_clear_free(DATA_BLOB *d);
_PUBLIC_ BOOL data_blob_equal(const DATA_BLOB *d1, const DATA_BLOB *d2);
_PUBLIC_ char *data_blob_hex_string(TALLOC_CTX *mem_ctx, DATA_BLOB *blob);
_PUBLIC_ DATA_BLOB data_blob_string_const(const char *str);
_PUBLIC_ DATA_BLOB data_blob_const(const void *p, size_t length);
_PUBLIC_ NTSTATUS data_blob_realloc(TALLOC_CTX *mem_ctx, DATA_BLOB *blob, size_t length);
_PUBLIC_ NTSTATUS data_blob_append(TALLOC_CTX *mem_ctx, DATA_BLOB *blob,
				   const void *p, size_t length);

/* The following definitions come from lib/util/util.c  */

_PUBLIC_ const char *tmpdir(void);
_PUBLIC_ BOOL file_exist(const char *fname);
_PUBLIC_ time_t file_modtime(const char *fname);
_PUBLIC_ BOOL directory_exist(const char *dname);
_PUBLIC_ BOOL directory_create_or_exist(const char *dname, uid_t uid, 
			       mode_t dir_perms);
_PUBLIC_ int set_blocking(int fd, BOOL set);
_PUBLIC_ void msleep(unsigned int t);
_PUBLIC_ void become_daemon(BOOL Fork);
_PUBLIC_ char* get_myname(void);
_PUBLIC_ BOOL is_ipaddress(const char *str);
_PUBLIC_ uint32_t interpret_addr(const char *str);
_PUBLIC_ struct ipv4_addr interpret_addr2(const char *str);
_PUBLIC_ BOOL is_zero_ip(struct ipv4_addr ip);
_PUBLIC_ BOOL same_net(struct ipv4_addr ip1,struct ipv4_addr ip2,struct ipv4_addr mask);
_PUBLIC_ BOOL process_exists(pid_t pid);
_PUBLIC_ BOOL fcntl_lock(int fd, int op, off_t offset, off_t count, int type);
_PUBLIC_ void dump_data(int level, const uint8_t *buf,int len);
_PUBLIC_ void *smb_xmalloc(size_t size);
_PUBLIC_ void *smb_xmemdup(const void *p, size_t size);
_PUBLIC_ char *smb_xstrdup(const char *s);
_PUBLIC_ void *memdup(const void *p, size_t size);
_PUBLIC_ void dump_data_pw(const char *msg, const uint8_t * data, size_t len);
_PUBLIC_ BOOL all_zero(const uint8_t *ptr, size_t size);
_PUBLIC_ void *realloc_array(void *ptr, size_t el_size, unsigned count);

/* The following definitions come from lib/util/fsusage.c  */

_PUBLIC_ int sys_fsusage(const char *path, uint64_t *dfree, uint64_t *dsize);

/* The following definitions come from lib/util/ms_fnmatch.c  */

int ms_fnmatch(const char *pattern, const char *string, enum protocol_types protocol);
int gen_fnmatch(const char *pattern, const char *string);

/* The following definitions come from lib/util/mutex.c  */

_PUBLIC_ BOOL register_mutex_handlers(const char *name, struct mutex_ops *ops);

/* The following definitions come from lib/util/idtree.c  */

_PUBLIC_ struct idr_context *idr_init(TALLOC_CTX *mem_ctx);
_PUBLIC_ int idr_get_new(struct idr_context *idp, void *ptr, int limit);
_PUBLIC_ int idr_get_new_above(struct idr_context *idp, void *ptr, int starting_id, int limit);
_PUBLIC_ int idr_get_new_random(struct idr_context *idp, void *ptr, int limit);
_PUBLIC_ void *idr_find(struct idr_context *idp, int id);
_PUBLIC_ int idr_remove(struct idr_context *idp, int id);

/* The following definitions come from lib/util/module.c  */

_PUBLIC_ init_module_fn load_module(TALLOC_CTX *mem_ctx, const char *path);
_PUBLIC_ init_module_fn *load_modules(TALLOC_CTX *mem_ctx, const char *path);
_PUBLIC_ BOOL run_init_functions(NTSTATUS (**fns) (void));
#undef _PRINTF_ATTRIBUTE
#define _PRINTF_ATTRIBUTE(a1, a2)

#endif /* __LIB_UTIL_UTIL_PROTO_H__ */

