#ifndef __RPC_SERVER_DCERPC_SERVER_PROTO_H__
#define __RPC_SERVER_DCERPC_SERVER_PROTO_H__

#undef _PRINTF_ATTRIBUTE
#define _PRINTF_ATTRIBUTE(a1, a2) PRINTF_ATTRIBUTE(a1, a2)
/* This file was automatically generated by mkproto.pl. DO NOT EDIT */

#ifndef _PUBLIC_
#define _PUBLIC_
#endif


/* The following definitions come from rpc_server/dcerpc_server.c  */

_PUBLIC_ NTSTATUS dcesrv_interface_register(struct dcesrv_context *dce_ctx,
				   const char *ep_name,
				   const struct dcesrv_interface *iface,
				   const struct security_descriptor *sd);
NTSTATUS dcesrv_generic_session_key(struct dcesrv_connection *p,
				    DATA_BLOB *session_key);
_PUBLIC_ NTSTATUS dcesrv_fetch_session_key(struct dcesrv_connection *p,
				  DATA_BLOB *session_key);
NTSTATUS dcesrv_endpoint_connect(struct dcesrv_context *dce_ctx,
				 TALLOC_CTX *mem_ctx,
				 const struct dcesrv_endpoint *ep,
				 struct auth_session_info *session_info,
				 struct event_context *event_ctx,
				 struct messaging_context *msg_ctx,
				 uint32_t server_id,
				 uint32_t state_flags,
				 struct dcesrv_connection **_p);
_PUBLIC_ NTSTATUS dcesrv_endpoint_search_connect(struct dcesrv_context *dce_ctx,
					TALLOC_CTX *mem_ctx,
					const struct dcerpc_binding *ep_description,
					struct auth_session_info *session_info,
					struct event_context *event_ctx,
					struct messaging_context *msg_ctx,
					uint32_t server_id,
					uint32_t state_flags,
					struct dcesrv_connection **dce_conn_p);
_PUBLIC_ NTSTATUS dcesrv_reply(struct dcesrv_call_state *call);
_PUBLIC_ struct socket_address *dcesrv_connection_get_my_addr(struct dcesrv_connection *conn, TALLOC_CTX *mem_ctx);
_PUBLIC_ struct socket_address *dcesrv_connection_get_peer_addr(struct dcesrv_connection *conn, TALLOC_CTX *mem_ctx);
NTSTATUS dcesrv_input_process(struct dcesrv_connection *dce_conn);
_PUBLIC_ NTSTATUS dcesrv_input(struct dcesrv_connection *dce_conn, const DATA_BLOB *data);
_PUBLIC_ NTSTATUS dcesrv_output(struct dcesrv_connection *dce_conn, 
		       void *private_data,
		       NTSTATUS (*write_fn)(void *private_data, DATA_BLOB *output, size_t *nwritten));
_PUBLIC_ NTSTATUS dcesrv_init_ipc_context(TALLOC_CTX *mem_ctx, struct dcesrv_context **_dce_ctx);
_PUBLIC_ NTSTATUS dcerpc_register_ep_server(const void *_ep_server);
const struct dcesrv_endpoint_server *dcesrv_ep_server_byname(const char *name);
const struct dcesrv_critical_sizes *dcerpc_module_version(void);
NTSTATUS server_service_rpc_init(void);

/* The following definitions come from rpc_server/dcerpc_sock.c  */

NTSTATUS dcesrv_add_ep_unix(struct dcesrv_context *dce_ctx, struct dcesrv_endpoint *e,
				    struct event_context *event_ctx, const struct model_ops *model_ops);
NTSTATUS dcesrv_add_ep_ncalrpc(struct dcesrv_context *dce_ctx, struct dcesrv_endpoint *e,
				       struct event_context *event_ctx, const struct model_ops *model_ops);
NTSTATUS dcesrv_add_ep_tcp(struct dcesrv_context *dce_ctx, struct dcesrv_endpoint *e,
				   struct event_context *event_ctx, const struct model_ops *model_ops);

/* The following definitions come from rpc_server/dcesrv_auth.c  */

BOOL dcesrv_auth_bind(struct dcesrv_call_state *call);
BOOL dcesrv_auth_bind_ack(struct dcesrv_call_state *call, struct ncacn_packet *pkt);
BOOL dcesrv_auth_auth3(struct dcesrv_call_state *call);
BOOL dcesrv_auth_alter(struct dcesrv_call_state *call);
BOOL dcesrv_auth_alter_ack(struct dcesrv_call_state *call, struct ncacn_packet *pkt);
BOOL dcesrv_auth_request(struct dcesrv_call_state *call, DATA_BLOB *full_packet);
BOOL dcesrv_auth_response(struct dcesrv_call_state *call,
			  DATA_BLOB *blob, struct ncacn_packet *pkt);

/* The following definitions come from rpc_server/handles.c  */

_PUBLIC_ struct dcesrv_handle *dcesrv_handle_new(struct dcesrv_connection_context *context, 
					uint8_t handle_type);
_PUBLIC_ struct dcesrv_handle *dcesrv_handle_fetch(struct dcesrv_connection_context *context, 
					  struct policy_handle *p,
					  uint8_t handle_type);
#undef _PRINTF_ATTRIBUTE
#define _PRINTF_ATTRIBUTE(a1, a2)

#endif /* __RPC_SERVER_DCERPC_SERVER_PROTO_H__ */

